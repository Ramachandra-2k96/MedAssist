"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import environ
import os

# Initialise environment variables early so we can use them in DATABASES and other settings
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-l_r1i4bi1900s9v)k8i6_o3k8p(^sxvvc*j_6eb!49@wyi8#mu"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "accounts",
    "django_crontab",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Prefer DATABASE_URL (12-factor style). If not provided, fall back to explicit POSTGRES_* envs; otherwise use SQLite.
DATABASE_URL = env('DATABASE_URL', default=None)
if DATABASE_URL:
    # django-environ can parse DATABASE_URL with env.db()
    DATABASES = {
        'default': env.db()
    }
else:
    # fallback to explicit POSTGRES_DB vars if provided
    POSTGRES_DB = env('POSTGRES_DB', default='')
    if POSTGRES_DB:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': POSTGRES_DB,
                'USER': env('POSTGRES_USER', default='postgres'),
                'PASSWORD': env('POSTGRES_PASSWORD', default=''),
                'HOST': env('POSTGRES_HOST', default='localhost'),
                'PORT': env('POSTGRES_PORT', default='5432'),
            }
        }
    else:
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs/cron.log',
        },
    },
    'loggers': {
        'accounts.cron': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Media files (kept for backward compatibility, but files are stored in GCP)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Google Cloud Storage / GCP settings
GCP_SERVICE_ACCOUNT_FILE = env('GCP_SERVICE_ACCOUNT_FILE', default='')
GCP_BUCKET_NAME = env('GCP_BUCKET_NAME', default='medassist-bucket')

# Initialize GCP Storage on startup
if GCP_SERVICE_ACCOUNT_FILE:
    try:
        from accounts.gcp_utils import init_bucket
        init_bucket()
        print("✓ GCP Storage initialized successfully")
    except Exception as e:
        print(f"⚠ Warning: GCP Storage initialization failed: {e}")
        print("  File uploads will fail until GCP is properly configured.")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    # Access token lifetime increased to 15 days per request
    'ACCESS_TOKEN_LIFETIME': timedelta(days=15),
    # Keep refresh token aligned with access for this app (15 days)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=15),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Next.js default
    "http://127.0.0.1:3000",
]


TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID",default='')
TWILIO_AUTH_TOKEN = env("TWILIO_AUTH_TOKEN",default='')
TWILIO_FROM_NUMBER = env("TWILIO_FROM_NUMBER",default='')


AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID",default='')
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY",default='')
AWS_REGION = env("AWS_REGION",default='')

CEREBRUS_API_KEY = env("CEREBRUS_API_KEY")

CRONJOBS = [
    ('*/20 * * * *', 'accounts.cron.send_medication_reminders'),
]